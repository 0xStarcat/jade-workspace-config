############# HTML #############

'.text.html':
  'jinNewTemplate':
    'prefix': 'jinNewTemplate',
    'body': """
{% extends "base.html" %}
{% block content %}
  <div class="${1:class}">
    ${2:}
  </div>
{% endblock %}
    """
############# PYTHON #############

'.source.python':
## - PYTHON - ALEMBIC
  'aleColumn':
    'prefix': 'aleColumn'
    'body': "sa.Column('${1:column_name}', ${2:sa.Text})$3"
  'alePrimaryKey':
    'prefix': 'alePColumn'
    'body': "sa.Column('id', sa.Integer, primary_key=True)"
  'aleTextColumn':
    'prefix': 'aleTColumn'
    'body': "sa.Column('${1:column_name}', sa.Text)$2"
  'aleIntegerColumn':
    'prefix': 'aleIColumn'
    'body': "sa.Column('${1:column_name}', sa.Integer)$2"
  'aleFloatColumn':
    'prefix': 'aleFlColumn'
    'body': "sa.Column('${1:column_name}', sa.Float)$2"
  'aleForeignKeyColumn':
    'prefix': 'aleFColumn'
    'body': "sa.Column('${1:column_name}', sa.Integer, sa.ForeignKey('${2:Table}.id'), nullable=${3:False})$4"
  'aleTable':
    'prefix': 'aleTable'
    'body': "op.create_table('${1:table_name}')$2"
  'aleDropTable':
    'prefix': 'aleDropTable'
    'body': "op.drop_table('${1:table_name}')$2"
  'aleIndex':
    'prefix': 'aleIndex'
    'body': "op.create_index('${1:index_name}', '${2:table_name}', ['${3:columns}'], None, unique=${4:False})$5"
## - PYTHON - FLASK
  'flask migrate primary key column':
    'prefix': 'flmPKeyCol'
    'body': "id = db.Column(db.Integer, primary_key=True)"
  'flask migrate string column':
    'prefix': 'flmSCol'
    'body': "${1:column} = db.Column(db.String(${2:128}), server_default=${3:''}, index=${4:False}, unique=${5:False}, nullable=${6:True})${7:}"
  'flask migrate datetime column':
    'prefix': 'flmDCol'
    'body': "${1:column} = db.Column(db.DateTime, server_default=${2:db.func.current_timestamp()}, nullable=${3:True})${4:}"
  'flask migrate boolean column':
    'prefix': 'flmBCol'
    'body': "${1:column} = db.Column(db.Boolean, nullable=${2:True})${3:}"
  'flask migrate text column':
    'prefix': 'flmTCol'
    'body': "${1:column} = db.Column(db.Text, server_default=${2:''}, nullable=${3:True})${4:}"
  'flask migrate float column':
    'prefix': 'flmFCol'
    'body': "${1:column} = db.Column(db.Float, nullable=${2:True})${3:}"
  'flask migrate integer column':
    'prefix': 'flmICol'
    'body': "${1:column} = db.Column(db.Integer, nullable=${2:True})${3:}"
  'flmRelCol':
    'prefix': 'flmRelCol'
    'body': "${1:Column} = db.relationship('${2:Related_to_model}', backref='${3:reference_key}', lazy='${4:dynamic}')${5:}"
  'flmFKeyCol':
    'prefix': 'flmFkeyCol'
    'body': "${1:Column} = db.Column('${2:column_name}', db.Integer, db.ForeignKey('${3:reference}.id'), nullable=${4:True})${5:}"
  'flask app import blueprint':
    'prefix': 'flappimpbp'
    'body': """
from app.${1:blueprint} import bp as ${1:blueprint}_bp
app.register_blueprint(${1:blueprint}_bp)
      """
## - PYTHON - Django
  'django model field text':
    'prefix': 'djmodTextCol'
    'body': 'models.TextField(blank=${1:True}, null=${2:True})${3:}'
  'django model field boolean':
    'prefix': 'djmodBoolCol'
    'body': 'models.BooleanField(blank=${1:True}, null=${2:True})${3:}'
  'django model field integer':
    'prefix': 'djmodIntCol'
    'body': 'models.${1:}IntegerField(blank=${2:True}, null=${3:True})${4:}'
  'django model field char':
    'prefix': 'djmodCharCol'
    'body': 'models.CharField(max_length=${1:}, blank=${2:True}, null=${3:True})${4:}'
  'django model field date':
    'prefix': 'djmodDateCol'
    'body': 'models.DateTimeField(default=${1:}, blank=${2:True}, null=${3:True})${4:}'
  'django model field decimal':
    'prefix': 'djmodDecCol'
    'body': 'models.DecimalField(decimal_places=${1:16}, max_digits=${2:100}, blank=${3:True}, null=${4:True})${5:}'
  'django model field foreign key':
    'prefix': 'djmodFKCol'
    'body': 'models.ForeignKey(${1:Model}, on_delete=models.${2:CASCADE}, null=${3:False})${4:}'




############# JAVASCRIPT #############

'.source.js':
  'ImportFrom':
    'prefix': 'importfrom'
    'body': "import ${1:Module} from '${2:Path}'"
  'ThisMethodBind':
    'prefix': 'thismethodbind'
    'body': "this.${1:method} = this.${1:method}.bind(this)"
  'Getter':
    'prefix': 'getter'
    'body': """
      get ${1:attribute}() {
        return this._${1:attribute}
      }
    """
  'GetSetter':
    'prefix': 'getsetter'
    'body': """
      get ${1:attribute}() {
        return this._${1:attribute}
      }

      set ${1:attribute}(${1:attribute}) {
        this._${1:attribute} = ${1:attribute}
      }
    """
  'Pure React Component':
    'prefix': 'reactPureComponent'
    'body': """
import React from 'react'
import PropTypes from 'prop-types'

const ${1:Component} = props => {
  return (<div className="${2:classname}"/>)
}

${1:Component}.propTypes = {

}

export default ${1:Component}
    """

  'Full React Component':
    'prefix': 'reactComponentFull',
    'body': """
import React from 'react'
import PropTypes from 'prop-types'

class ${1:Component} extends React.Component {
  constructor(props) {
    super(props)
  }

  render() {
    return (<div className="${2:classname}"/>)
  }

}

${1:Component}.propTypes = {

}

export default ${1:Component}

"""

  'Connected React Component':
    'prefix': 'reactConnectedComponent',
    'body': """
import React from 'react'
import PropTypes from 'prop-types'
import { connect } from 'react-redux'

class ${1:Component} extends React.Component {
  constructor(props) {
    super(props)
  }

  render() {
    return (<div className="${2:classname}"/>)
  }

}

${1:Component}.propTypes = {
  dispatch: PropTypes.func
}

const mapStateToProps = state => {
  return {
    store: state
  }
}

export default connect(mapStateToProps)(${1:Component})

"""

  'React Component Test':
    'prefix': 'reactTest'
    'body': """
  import React from 'react'
  import { configure, shallow, mount } from 'enzyme'
  import sinon from 'sinon'
  import Adapter from 'enzyme-adapter-react-16'
  import ${1:Component} from '../index.js'
  import toJson from 'enzyme-to-json'

  configure({ adapter: new Adapter() })

  describe('${1:Component}', () => {
    const wrapper = shallow(
      <${1:Component} />
    )

    it('renders the component', () => {
      expect(wrapper.find('${2:Class}').length).toEqual(1)
    })

    it('renders correctly', () => {
      expect(toJson(wrapper)).toMatchSnapshot()
    })
  })
  """
  'ImportStyle':
    'prefix': 'ImportStyle'
    'body': "import './style.scss'"

  'PropTypes bool':
    'prefix': 'propbool'
    'body': "PropTypes.bool"
  'PropTypes string':
    'prefix': 'propstring'
    'body': "PropTypes.string"
  'PropTypes number':
    'prefix': 'propnumber'
    'body': "PropTypes.number"
  'PropTypes object':
    'prefix': 'propobject'
    'body': "PropTypes.object"
  'PropTypes array':
    'prefix': 'proparray'
    'body': "PropTypes.array"
  'PropTypes function':
    'prefix': 'propfunction'
    'body': "PropTypes.func"
  'PropTypes oneoftype':
    'prefix': 'proponeoftype'
    'body': "PropTypes.OneOfType([${1:1},${2:2}])"

############# VUE #############

'.text.vue':
  'vueBase':
    'prefix': 'vueBase'
    'body': """
      <template>
        <div id="${1:Compnent}">

        </div>
      </template>

      <script>
        export default {
          name: '${1:Compnent}',
          components: {},
          props: {}
        }
      </script>

      <style lang="${2:scss}" scoped>
        #${1:Component} {

        }
      </style>
    """

############# C#Sharp #############

'.source.cs':
  'new instance Var':
    'prefix': 'varnew'
    'body': '${1:type} ${2:name} = new ${1:type}(${3:});${4:}'

  'method':
    'prefix': 'method'
    'body': """
    ${1:returns} ${2:name}(${3:}) {
      ${4:}
    }
    """


  'public variable':
    'prefix': 'pvar'
    'body': 'public ${1:type} ${2:name};${3:}'

  'public static':
    'prefix': 'pstat'
    'body': 'public static ${1:type} ${2:name};${3:}'

  'public method':
    'prefix': 'pmethod'
    'body': """
    public ${1:returns} ${2:name}(${3:}) {
      ${4:}
    }
    """

  'private variable':
    'prefix': 'ppvar'
    'body': 'private ${1:type} ${2:name};${3:}'

  'private static':
    'prefix': 'ppstat'
    'body': 'private static ${1:type} ${2:name};${3:}'

  'private method':
    'prefix': 'ppmethod'
    'body': """
    private ${1:returns} ${2:name}(${3:}) {
      ${4:}
    }
    """
